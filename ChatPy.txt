==================== SERVER=======================

1. 채팅 프로그램에는 Socket이 필요함.

1.1 Socket은  ISO에서 제시한 OSI7계층 구조에서 
Application 계층과 Transport 계층 사이에서 상호간의 데이터를 주고받을 때 사용되는 
하나의 인터페이스를 의미.

(여기서 OSI-7계층 구조란 개발/유지 및 보수함에 있어 
상호간 간섭을 하지 않는 단위로 나눠놓은 계층구조를 의미)



2. 소켓의 사용법
2.1 소켓의 세팅
- 소켓은 AF(Address Family = 주소 체계)와 Socket Type으로 구성.
- python에서 AF는 AF_INET이라 작성하며,IPv4를 의미함.
- 소켓 타입은 여러가지가 존재함. 주로 사용되는 것은 SOCK_STREAM과 SOCK_DGRAM.
- 소켓은 객체를 생성해주어야 하며, 객체를 생성하기 위해서는 soket의 모든 부분을 import시켜야 함.

ex)
from socket import *
serverSock = socket(AF_INET, SOCK_STREAM)

- 생성된 소켓은Bind화 시켜야 함. 단, 클라이언트를 만들 시 불필요한 작업이며, 서버 운용 시 반드시 필요한 작업임.
- 이러한 작업은 생성된 소켓 번호와 실제 AF를 연결해주는 역할.

ex)
serverSock.bind(('', 8080))

※bind 내에는 '튜플'값을 입력해야 함. ->결국 이 인자는 AF가 되며, 앞부분은 ip, 뒷부분은 Port로 구성됨.
- 튜플 내 빈 문자열은 모든 포트를 받겠다는 의미(INADDR_ANY).
∴ 8080포트의 모든 인터페이스에 연결이 가능하도록 한다는 것을 의미.

- bind작업이 끝나면 listen단계가 필요.
-이는 상대방의 접속을 기다리는 단계로 넘어가겠다는 의미.

ex) 
serverSock.listen(1)
- listen 내 파라미터는 '허용 참여자 수'를 의미.
- 입력하지 않을 시, python에서 임의의 숫자를 입력함.
- 위 작업이 끝나면 상대방이 접속할 때 가지 계속 대기상태가 됨.
- 클라이언트의 접속 및 수락을 하기 위해서는 Accept가 필요함.

ex) 
connectionSock, addr = serverSock.accept()

- accept()는 소켓에 누군가 접속 후 연결되었을 때 return이 되는 구조를 가진 메서드.
- 누군가가 접속을 하지 않을 시, 소스코드 내 serverSock.accept() 부분에서 멈춰져 있는 상태.
- 만약 누군가가 접속하여 return값이 존재하게 되면, 
그 return 값으로 새로운 소켓과 상대방의 AF를 전달해주게 됨.

================================================


==================== Client =======================

1. 클라이언트 소켓 세팅

- 서버의 소켓 설정 과정보다 훨씬 간결함.
(bind, listen, accept 과정이 제외되며, connect 과정이 생김.)
- connect()는 클라이언트에서 서버로 접속하기 위한 메서드.
- 해당 메서드의 인자로는 AF와 호스트 주소/포트번호로 구성된 튜플이 요구됨.
-127.0.0.1은 자기 자신을 의미.

ex)
from socket import *
clientSock = socket(AF_INET, SOCK_STREAM)
clientSock.connect(('127.0.0.1', 8080))

- 위 예제는 AF는 자기 자신을 의미하며, 포트는 8080포트로 연결하겠다는 의미.

=================================================

================== 소켓의 송수신 =====================
-서버는 소켓 세팅에는 connectionSock을 이용하여 데이터를 주고 받음.
(bind()로 서버를 구성한 소켓으로는 데이터를 주고받지 않는 점을 주의!)

- 클라이언트는 clientSock을 사용하여 데이터를 주고 받음.

-실질적인 데이터를 주고 받는 메서드는 send()와 recv()를 이용.

- 메세지를 보내는 방법은 다음 예제와 같음.

ex)
msg = '안녕'
connectionSock.send(msg.encode('utf-8'))

-문자열 encode는 입력 데이터를 byte로 변환해주는 메서드.
-인코딩을 하지 않으면 에러가 뜨기 때문에 이를 주의해야 함.

- recv()를 실행하면 소켓에 메세지가 실제로 수신될 때 까지 대기상태로 있음.
- 해당 메서드의 인자로는 수신할 수 있는 바이트 크기를 지정할 수 있음.
- recv(1024)는 소켓에서 1024바이트만큼 가져오겠다는 것을 의미.
- encode된 메세지는 다시 decode를 통해 출력해주어야 함.

아래는 각각의 서버/클라이언트의 예제 소스
##################### Client #####################
from socket import *

clientSock = socket(AF_INET, SOCK_STREAM)
clientSock.connect(('127.0.0.1', 8080))

print('연결 확인 됐습니다.')
clientSock.send('I am a client'.encode('utf-8'))

print('메시지를 전송했습니다.')

data = clientSock.recv(1024)
print('받은 데이터 : ', data.decode('utf-8'))


##################### Server #####################

from socket import *

serverSock = socket(AF_INET, SOCK_STREAM)
serverSock.bind(('', 8080))
serverSock.listen(1)

connectionSock, addr = serverSock.accept()

print(str(addr),'에서 접속이 확인되었습니다.')

data = connectionSock.recv(1024)
print('받은 데이터 : ', data.decode('utf-8'))

connectionSock.send('I am a server.'.encode('utf-8'))
print('메시지를 보냈습니다.')
